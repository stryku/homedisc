SET ( ZEROMQ_FIND_REQUIRED TRUE )
SET ( EASYLOGGING_FIND_REQUIRED TRUE )
SET ( B64_FIND_REQUIRED TRUE )
SET ( MD5_FIND_REQUIRED TRUE )
SET ( BOOST_FIND_REQUIRED TRUE )

SET (WINDOWS_LIBRARIES_PATH C:/moje/lib)

### ZeroMQ ###

SET (ZEROMQ_WINDOWS_PATH ${WINDOWS_LIBRARIES_PATH}/zmq)

FIND_PATH ( ZEROMQ_INCLUDE_DIR NAMES zmq.hpp PATHS /usr/include/ /usr/local/include/ ${ZEROMQ_WINDOWS_PATH}/include )
FIND_LIBRARY ( ZEROMQ_LIBRARY NAMES zmq PATHS /usr/lib /usr/local/lib ${ZEROMQ_WINDOWS_PATH}/lib )

IF ( ZEROMQ_INCLUDE_DIR AND ZEROMQ_LIBRARY )
    SET ( ZEROMQ_FOUND TRUE )
ENDIF ( ZEROMQ_INCLUDE_DIR AND ZEROMQ_LIBRARY )


IF ( ZEROMQ_FOUND )
    SET ( DEP_FOUND TRUE )
    IF ( NOT ZEROMQ_FIND_QUIETLY )
        MESSAGE ( STATUS "Found ZeroMQ:" )
        MESSAGE ( STATUS "  (Headers)       ${ZEROMQ_INCLUDE_DIR}" )
        MESSAGE ( STATUS "  (Library)       ${ZEROMQ_LIBRARY}" )
    ENDIF ( NOT ZEROMQ_FIND_QUIETLY )
ELSE ( ZEROMQ_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( ZEROMQ_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find ZeroMQ" )
    ENDIF ( ZEROMQ_FIND_REQUIRED )
ENDIF ( ZEROMQ_FOUND )

### easylogging++ ###

SET (EASYLOGGING_WINDOWS_PATH ${WINDOWS_LIBRARIES_PATH}/easylogging)

FIND_PATH ( EASYLOGGING_INCLUDE_DIR NAMES easylogging++.h PATHS /usr/include/ /usr/local/include/ ${EASYLOGGING_WINDOWS_PATH} )

IF ( EASYLOGGING_INCLUDE_DIR )
    SET ( EASYLOGGING_FOUND TRUE )
ENDIF ( EASYLOGGING_INCLUDE_DIR )

IF ( EASYLOGGING_FOUND )
    SET ( DEP_FOUND TRUE )
    IF ( NOT EASYLOGGING_FIND_QUIETLY )
        MESSAGE ( STATUS "Found easylogging++:" )
        MESSAGE ( STATUS "  (Headers)       ${EASYLOGGING_WINDOWS_PATH}" )
    ENDIF ( NOT EASYLOGGING_FIND_QUIETLY )
ELSE ( EASYLOGGING_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( EASYLOGGING_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find easylogging++" )
    ENDIF ( EASYLOGGING_FIND_REQUIRED )
ENDIF ( EASYLOGGING_FOUND )

### b64 ###

SET (B64_WINDOWS_PATH ${WINDOWS_LIBRARIES_PATH}/b64)

FIND_PATH ( B64_INCLUDE_DIR NAMES b64/decode.h b64/cdecode.h b64/cencode.h b64/encode.h  PATHS /usr/include/ /usr/local/include/ ${B64_WINDOWS_PATH}/include )
FIND_LIBRARY ( B64_LIBRARY NAMES b64 PATHS /usr/lib /usr/local/lib ${B64_WINDOWS_PATH}/lib )

IF ( B64_INCLUDE_DIR AND B64_LIBRARY )
    SET ( B64_FOUND TRUE )
ENDIF ( B64_INCLUDE_DIR AND B64_LIBRARY )

IF ( B64_FOUND )
    SET ( DEP_FOUND TRUE )
    IF ( NOT B64_FIND_QUIETLY )
        MESSAGE ( STATUS "Found b64:" )
        MESSAGE ( STATUS "  (Headers)       ${B64_INCLUDE_DIR}" )
        MESSAGE ( STATUS "  (Library)       ${B64_LIBRARY}" )
    ENDIF ( NOT B64_FIND_QUIETLY )
ELSE ( B64_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( B64_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find base64" )
    ENDIF ( B64_FIND_REQUIRED )
ENDIF ( B64_FOUND )

### md5 ###

SET (MD5_WINDOWS_PATH ${WINDOWS_LIBRARIES_PATH}/md5)

FIND_PATH ( MD5_INCLUDE_DIR NAMES md5/md5.hpp PATHS /usr/include/ /usr/local/include/ ${MD5_WINDOWS_PATH} )

IF ( MD5_INCLUDE_DIR )
    SET ( MD5_FOUND TRUE )
ENDIF ( MD5_INCLUDE_DIR )

IF ( MD5_FOUND )
    SET ( DEP_FOUND TRUE )
    IF ( NOT MD5_FIND_QUIETLY )
        MESSAGE ( STATUS "Found md5:" )
        MESSAGE ( STATUS "  (Headers)       ${MD5_INCLUDE_DIR}" )
    ENDIF ( NOT MD5_FIND_QUIETLY )
ELSE ( MD5_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( MD5_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find md5" )
    ENDIF ( MD5_FIND_REQUIRED )
ENDIF ( MD5_FOUND )

### boost ###

SET (BOOST_WINDOWS_PATH ${WINDOWS_LIBRARIES_PATH}/boost/boost_1_59_0)

FIND_PATH ( BOOST_INCLUDE_DIR NAMES boost/array.hpp PATHS /usr/include/ /usr/local/include/ ${BOOST_WINDOWS_PATH} )

IF ( BOOST_INCLUDE_DIR )
    SET ( BOOST_FOUND TRUE )
ENDIF ( BOOST_INCLUDE_DIR )

IF ( BOOST_FOUND )
    SET ( DEP_FOUND TRUE )
    IF ( NOT BOOST_FIND_QUIETLY )
        MESSAGE ( STATUS "Found boost:" )
        MESSAGE ( STATUS "  (Headers)       ${BOOST_INCLUDE_DIR}" )
    ENDIF ( NOT BOOST_FIND_QUIETLY )
ELSE ( BOOST_FOUND )
    SET ( DEP_FOUND FALSE )
    IF ( BOOST_FIND_REQUIRED )
        MESSAGE ( FATAL_ERROR "Could not find boost" )
    ENDIF ( BOOST_FIND_REQUIRED )
ENDIF ( BOOST_FOUND )


